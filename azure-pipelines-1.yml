# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
pool:
  default
resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '293fb466-c3f8-47a6-8098-1b660a6f944a'
  imageRepository: 'imgtripvieweruserprofile'
  containerRegistry: 'openhackrm78bnn5acr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/apis/userprofile/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    
    - task: AzureWebAppContainer@1
      inputs:
       azureSubscription: 'OTA-PRD-1310(337a5d8e-1cf6-4a6f-bc59-95ea4f64f58b)'
       appName: 'openhackrm78bnn5userprofile'
       deployToSlotOrASE: true
       resourceGroupName: 'openhackrm78bnn5rg'
       slotName: 'staging'
       containers: '$(containerRegistry)/$(imageRepository):$(tag)'
       
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          #!/bin/bash
          
          declare -i duration=10
          declare hasUrl=""
          declare endpoint
          declare -i status200count=0
          
          endpoint="https://openhackrm78bnn5userprofile-staging.azurewebsites.net/api/healthcheck/user"
          
          healthcheck() {
              declare url=$1
              result=$(curl -i $url 2>/dev/null | grep HTTP/1.1)
              echo $result
          }
          
          for i in {1..12}
          do
            result=`healthcheck $endpoint` 
            declare status
            echo $result
            if [[ -z $result ]]; then  
              status="N/A"
              echo "Site not found"
            else
              status=${result:9:3}
              timestamp=$(date "+%Y%m%d-%H%M%S")
              if [[ -z $hasUrl ]]; then
                echo "$timestamp | $status "
              else
                echo "$timestamp | $status | $endpoint " 
              fi 
              
              if [ $status -eq 200 ]; then
                ((status200count=status200count + 1))
          
                if [ $status200count -gt 5 ]; then
                    break
                fi
              fi
          
              sleep $duration
            fi
          done
          
          if [ $status200count -gt 5 ]; then
            echo "API UP"
            # APISTATUS is a pipeline variable
            APISTATUS="Up"
          else
            echo "API DOWN"
            APISTATUS="Down"
            exit 1;
          fi